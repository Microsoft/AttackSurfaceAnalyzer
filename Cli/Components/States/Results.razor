@using Microsoft.CST.AttackSurfaceAnalyzer.Types
@using Microsoft.CST.AttackSurfaceAnalyzer.Objects
@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

<select @bind="SelectedResultType">
    @foreach (var resultType in foundResultTypes)
    {
        <option value="@resultType.Key">@resultType.Key : @resultType.Value </option>
    }
</select>

<select @bind="maxResults" @onclick="GetAnalysisResults">
    <option value="50">50</option>
    <option selected value="100">100</option>
    <option value="250">250</option>
    <option value="500">500</option>
</select>
       
@if (pageCount > 0)
{
<nav aria-label="Paged results navigation">
    <ul class="pagination">
        <li class="page-item">
            <a class="page-link btn-secondary" aria-label="Previous page" @onclick="() => NavigateResultsPage(-1)">
                <span aria-hidden="true">&lt;</span>
                <span class="sr-only">Previous</span>
            </a>
        </li>
        @for (int i = 1; i <= pageCount; i++)
        {
            var pageNum = i;
            <li class="page-item"><a class="page-link btn-secondary" aria-label="Page-@pageNum" @onclick="() => GetResultsPage(pageNum)">@pageNum</a></li>
        }
        <li class="page-item">
            <a class="page-link btn-secondary" aria-label="Next page" @onclick="() => NavigateResultsPage(1)">
                <span aria-hidden="true">&gt;</span>
                <span class="sr-only">Next</span>
            </a>
        </li>
    </ul>
    @foreach (var result in analysisResults)
    {
        <div>
            <div style="color: red;">@result.Analysis : @result.Identity</div>
            @foreach (var rule in result.Rules)
            {
                <div>@rule.Name : @rule.Description</div>
            }
        </div>
        <br />
    }
</nav>
}

@code {

    [Parameter]
    public string FirstRunId { get; set; }
    [Parameter]
    public string SecondRunId { get; set; }
    [Parameter]
    public string AnalysesHash { get; set; }
    [Parameter]
    public string MonitorRunId { get; set; }

    protected override void OnInitialized()
    {
        ParseOptsToResultTypes();
        GetAnalysisResults();
        base.OnInitialized();
    }

    int offset = 0;
    int page = 1;
    int pageCount = 0;
    int maxResults = 100;

    void GetResultsPage(int selectedPage)
    {
        page = selectedPage;
        offset = maxResults * (page - 1);
        GetAnalysisResults();
        this.StateHasChanged();
    }

    void NavigateResultsPage(int pageOffset)
    {
        page += pageOffset;
        if (page < 1) { page = 1;}
        else if (page > pageCount) { page = pageCount; }
        GetResultsPage(page);
    }

    string SelectedResultType
    {
        get { return _selectedResultType; }
        set
        {
            _selectedResultType = value;
            offset = 0;
            page = 1;
            GetAnalysisResults();
            this.StateHasChanged();
        }
    }

    string _selectedResultType = "FILEMONITOR";

    public void GetAnalysisResults()
    {
        var resultType = (RESULT_TYPE)Enum.Parse(typeof(RESULT_TYPE), SelectedResultType);
        int found;
        switch (resultType)
        {
            case RESULT_TYPE.FILEMONITOR:
                analysisResults = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResults(string.Empty, MonitorRunId, AnalysesHash, resultType, offset, maxResults);
                found = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(string.Empty, MonitorRunId, AnalysesHash, (int)resultType);
                pageCount = (int)Math.Ceiling((double)found / maxResults);
                break;
            default:
                analysisResults = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResults(FirstRunId, SecondRunId, AnalysesHash, resultType, offset, maxResults);
                found = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(FirstRunId, SecondRunId, AnalysesHash, (int)resultType);
                pageCount = (int)Math.Ceiling((double)found / maxResults);
                break;
        }
    }

    public void ParseOptsToResultTypes()
    {
        foundResultTypes.Clear();
        foreach (var resultType in Enum.GetValues(typeof(RESULT_TYPE)))
        {
            var found = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(FirstRunId, SecondRunId, AnalysesHash, (int)resultType);
            if (found == 0)
            {
                found = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(null, MonitorRunId, AnalysesHash, (int)resultType);
            }
            foundResultTypes.Add((RESULT_TYPE)resultType, found);
        }
    }

    Dictionary<RESULT_TYPE, int> foundResultTypes = new Dictionary<RESULT_TYPE, int>();
    public List<CompareResult> analysisResults = new List<CompareResult>();
}
