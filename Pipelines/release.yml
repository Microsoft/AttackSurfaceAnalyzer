name: ASA 2.1 Release

trigger:
  batch: true
  paths:
    include:
    - Asa
    - Lib
  branches:
    include:
    - release/v2.1

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Test
  jobs:
  - job: Windows
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.0.100'

    - task: DotNetCoreCLI@2
      displayName: 'Build Tests'
      inputs:
        projects: 'AsaTests/AsaTests.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.binariesdirectory)/Tests'

    - task: VSTest@2
      displayName: 'Run Tests'
      inputs:
        testAssemblyVer2: AsaTests.dll
        searchFolder: '$(build.binariesdirectory)/Tests'

- stage: Build
  jobs:
  - job: Windows
    pool:
      vmImage: 'windows-latest'

    steps:
    # Default Azure Pipelines Image doesn't contain .NET Core 3.0 SDK
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.0.100'

    - script: 'dotnet tool install -g nbgv'
      displayName: 'Install GitVersioning'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish ASA Windows'
      inputs:
        command: publish
        projects: 'Asa/Asa.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.binariesdirectory)\windows\ -r win-x64'
        zipAfterPublish: false

    - task: DotNetCoreCLI@2
      displayName: 'Build LIB NuPkg'
      inputs:
        projects: 'Lib/AsaLib.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.binariesdirectory)\lib\'

    - task: AntiMalware@3
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.binariesdirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Standard'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Interim Build Artifacts'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)\windows'
        ArtifactName: 'WindowsBuild'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Interim Build Artifacts'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)\lib'
        ArtifactName: 'LibraryBuild'

    # Signing task requires .NET Core 2.X
    - task: UseDotNet@2
      inputs:
        packageType: 'runtime'
        version: '2.2.7'

    - task: EsrpCodeSigning@1
      inputs:
        ConnectedServiceName: 'CodeSignforATSAN'
        FolderPath: '$(build.binariesdirectory)/windows'
        Pattern: 'Asa.exe, Asa.dll, AsaLib.dll'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
              {
              "keyCode": "CP-230012",
              "operationSetCode": "SigntoolSign",
              "parameters": [
                  {
                  "parameterName": "OpusName",
                  "parameterValue": "Microsoft"
                  },
                  {
                  "parameterName": "OpusInfo",
                  "parameterValue": "http://www.microsoft.com"
                  },
                  {
                  "parameterName": "PageHash",
                  "parameterValue": "/NPH"
                  },
                  {
                  "parameterName": "FileDigest",
                  "parameterValue": "/fd sha256"
                  },
                  {
                  "parameterName": "TimeStamp",
                  "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  }
              ],
              "toolName": "signtool.exe",
              "toolVersion": "6.2.9304.0"
              }
          ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'

    - task: EsrpCodeSigning@1
      inputs:
        ConnectedServiceName: 'CodeSignforATSAN'
        FolderPath: '$(build.binariesdirectory)\Lib'
        Pattern: '*.nupkg'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [ 
              {
                  "keyCode": "CP-401405",
                  "operationSetCode": "NuGetSign",
                  "parameters": [ ],
                  "toolName": "sign",
                  "toolVersion": "1.0"
              },
              {
                  "keyCode": "CP-401405",
                  "operationSetCode": "NuGetVerify",
                  "parameters": [ ],
                  "toolName": "sign",
                  "toolVersion": "1.0"
              }
          ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'

    - task: PowerShell@2
      displayName: Compile CodeSign Summaries for Publication
      inputs:
        targetType: 'inline'
        script: |
          mkdir $(build.binariesdirectory)\CodeSign
          Get-ChildItem -Path $(build.binariesdirectory) -Recurse -Filter CodeSign* | foreach { Copy-Item -Path $_.FullName -Destination $(build.binariesdirectory)\CodeSign\$_.Name }

    - task: PublishBuildArtifacts@1
      displayName: 'Publish CodeSign Summaries'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)\CodeSign'
        ArtifactName: 'CodeSign'

    - task: PowerShell@2
      displayName: Prepare Artifacts
      inputs:
        targetType: 'inline'
        script: |
          Move-Item -Path "$(build.binariesdirectory)\lib\*.nupkg" -Destination "$(build.artifactstagingdirectory)"

          $longVersion = (nbgv get-version -v AssemblyInformationalVersion)
          $version = $longVersion.split('+')[0]
          $asaFolder = "$(build.binariesdirectory)\Asa-win-$version"
          mkdir $asaFolder

          Move-Item -Path "$(build.binariesdirectory)\windows\asa" -Destination $asaFolder\res

          Copy-Item -Path "$(build.sourcesdirectory)\Asa\AsaLaunch.bat" -Destination $asaFolder\AsaLaunch.bat
          Copy-Item -Path "$(build.sourcesdirectory)\Asa\AsaLaunchGui.bat" -Destination $asaFolder\AsaLaunchGui.bat

          7z a "$(build.artifactstagingdirectory)\Asa-win-$version.zip" "$(build.binariesdirectory)\Asa-win-$version"

          Get-ChildItem $(build.artifactstagingdirectory) | Foreach-Object{
            $name = $_.Name
            $tmp = (Get-FileHash "$(build.artifactstagingdirectory)\$name").Hash
            Add-Content $(build.binariesdirectory)\HASHES_WINDOWS.txt "$tmp`t$name"
          }

    - task: PublishBuildArtifacts@1
      displayName: 'Publish HASHES.txt'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)\HASHES_WINDOWS.txt'
        ArtifactName: 'HASHES'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'BINARIES'

  - job: Linux
    pool:
        vmImage: 'Ubuntu-latest'
    steps:
    - script: 'dotnet tool install -g nbgv'
      displayName: 'Install GitVersioning'
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.0.100'
    - task: DotNetCoreCLI@2
      displayName: 'Publish ASA Linux'
      inputs:
          command: publish
          projects: 'Asa/Asa.csproj'
          arguments: '--configuration $(BuildConfiguration) --output $(build.binariesdirectory)/linux -r linux-x64'
          zipAfterPublish: false

    - task: DotNetCoreCLI@2
      displayName: 'Publish ASA macOS'
      inputs:
          command: publish
          projects: 'Asa/Asa.csproj'
          arguments: '--configuration $(BuildConfiguration) --output $(build.binariesdirectory)/macos -r osx-x64'
          zipAfterPublish: false
    - task: CmdLine@2
      inputs:
        script: |
          VERSION="$(nbgv get-version -v AssemblyInformationalVersion | cut -d'+' -f 1)"
          mkdir $BIN_DIR/res
          mv $BIN_DIR/linux/Asa $BIN_DIR/res/
          mv $BIN_DIR/res $BIN_DIR/linux/

          mkdir $BIN_DIR/res
          mv $BIN_DIR/macos/Asa $BIN_DIR/res/
          mv $BIN_DIR/res $BIN_DIR/macos/

          cp $SRC_DIR/Asa/AsaLaunch.sh $BIN_DIR/linux/AsaLaunch.sh
          cp $SRC_DIR/Asa/AsaLaunch.sh $BIN_DIR/macos/AsaLaunch.sh
          cp $SRC_DIR/Asa/AsaLaunchGui.sh $BIN_DIR/linux/AsaLaunchGui.sh
          cp $SRC_DIR/Asa/AsaLaunchGui.sh $BIN_DIR/macos/AsaLaunchGui.sh

          mv $BIN_DIR/linux $BIN_DIR/Asa-linux-$VERSION
          mv $BIN_DIR/macos $BIN_DIR/Asa-macos-$VERSION

          chmod +x $BIN_DIR/Asa-linux-$VERSION/AsaLaunch.sh
          chmod +x $BIN_DIR/Asa-macos-$VERSION/AsaLaunch.sh
          chmod +x $BIN_DIR/Asa-linux-$VERSION/AsaLaunchGui.sh
          chmod +x $BIN_DIR/Asa-macos-$VERSION/AsaLaunchGui.sh
          chmod +x $BIN_DIR/Asa-linux-$VERSION/res/Asa
          chmod +x $BIN_DIR/Asa-macos-$VERSION/res/Asa

          cd $BIN_DIR
          tar -czvf $ART_DIR/Asa-linux-$VERSION.tar.gz Asa-linux-$VERSION
          tar -czvf $ART_DIR/Asa-macos-$VERSION.tar.gz Asa-macos-$VERSION

          sha256sum $ART_DIR/Asa-linux-$VERSION.tar.gz | awk ' { n=split($2, a, "/"); $2 = a[n]; print; } ' OFS='\t' >> $BIN_DIR/HASHES_LINUX.txt
          sha256sum $ART_DIR/Asa-macos-$VERSION.tar.gz | awk ' { n=split($2, a, "/"); $2 = a[n]; print; } ' OFS='\t' >> $BIN_DIR/HASHES_MAC.txt
      displayName: 'Prepare Artifacts'
      env:
        BIN_DIR: $(build.binariesdirectory)
        ART_DIR: $(build.artifactstagingdirectory)
        SRC_DIR: $(build.sourcesdirectory)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish HASHES'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)/HASHES_LINUX.txt'
        ArtifactName: 'HASHES'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish HASHES'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)/HASHES_MAC.txt'
        ArtifactName: 'HASHES'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifaces'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)/'
        ArtifactName: 'BINARIES'

- stage: Hashes
  jobs:
  - job: Sign
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download HASH files'
      inputs:
        downloadType: specific
        itemPattern: 'HASHES/*.txt'
        downloadPath: '$(build.binariesdirectory)'

    - powershell: 'Get-Content $(build.binariesdirectory)\HASHES\HASHES_LINUX.txt, $(build.binariesdirectory)\HASHES\HASHES_MAC.txt, $(build.binariesdirectory)\HASHES\HASHES_WINDOWS.txt | Set-Content $(build.binariesdirectory)\HASHES.txt'
      displayName: 'PowerShell Script'

    - task: EsrpCodeSigning@1
      inputs:
        ConnectedServiceName: 'CodeSignforATSAN'
        FolderPath: '$(build.binariesdirectory)'
        Pattern: 'HASHES.txt'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
              {
              "KeyCode" : "CP-450778-Pgp",
              "OperationCode" : "PgpClearsign",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
              }
          ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish HASHES'
      inputs:
        PathtoPublish: '$(build.binariesdirectory)/HASHES.txt'
        ArtifactName: 'HASHES'

- stage: GitHub
  jobs:
  - job: Publish
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download HASHES'
      inputs:
        downloadType: specific
        itemPattern: 'HASHES/HASHES.txt'
        downloadPath: '$(build.binariesdirectory)'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Binaries'
      inputs:
        downloadType: specific
        itemPattern: 'BINARIES/*'
        downloadPath: '$(build.binariesdirectory)'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Move-Item -Path "$(build.binariesdirectory)\HASHES\*" -Destination "$(build.artifactstagingdirectory)\"
          Move-Item -Path "$(build.binariesdirectory)\BINARIES\*" -Destination "$(build.artifactstagingdirectory)\"

    - task: GitHubRelease@1
      displayName: 'GitHub release update'
      inputs:
        gitHubConnection: 'Gabe-Asa'
        action: edit
        tag: 'v$(Build.BuildNumber)'
        title: 'v2.1 Public Preview'
        assets: '$(Build.ArtifactStagingDirectory)/*'
        assetUploadMode: replace
        isDraft: false
        isPreRelease: true
        changeLogCompareToRelease: lastNonDraftRelease