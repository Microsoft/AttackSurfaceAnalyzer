### YamlMime:ManagedReference
items:
- uid: AttackSurfaceAnalyzer.Utils.Filter
  commentId: T:AttackSurfaceAnalyzer.Utils.Filter
  id: Filter
  parent: AttackSurfaceAnalyzer.Utils
  children:
  - AttackSurfaceAnalyzer.Utils.Filter.DumpFilters
  - AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String)
  - AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String)
  - AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String,Regex@)
  - AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters
  - AttackSurfaceAnalyzer.Utils.Filter.LoadFilters(System.String)
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: Filter
  fullName: AttackSurfaceAnalyzer.Utils.Filter
  type: Class
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Filter
    path: ../Lib/Utils/Filter.cs
    startLine: 12
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: 'public static class Filter : object'
    content.vb: >-
      Public Module Filter
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String)
  commentId: M:AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String)
  id: IsFiltered(System.String,System.String,System.String,System.String,System.String)
  parent: AttackSurfaceAnalyzer.Utils.Filter
  langs:
  - csharp
  - vb
  name: IsFiltered(String, String, String, String, String)
  nameWithType: Filter.IsFiltered(String, String, String, String, String)
  fullName: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: IsFiltered
    path: ../Lib/Utils/Filter.cs
    startLine: 20
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static bool IsFiltered(string Platform, string ScanType, string ItemType, string Property, string Target)
    parameters:
    - id: Platform
      type: System.String
    - id: ScanType
      type: System.String
    - id: ItemType
      type: System.String
    - id: Property
      type: System.String
    - id: Target
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFiltered(Platform As String, ScanType As String, ItemType As String, Property As String, Target As String) As Boolean
  overload: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String)
  commentId: M:AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String)
  id: IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String)
  parent: AttackSurfaceAnalyzer.Utils.Filter
  langs:
  - csharp
  - vb
  name: IsFiltered(String, String, String, String, String, String)
  nameWithType: Filter.IsFiltered(String, String, String, String, String, String)
  fullName: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: IsFiltered
    path: ../Lib/Utils/Filter.cs
    startLine: 33
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static bool IsFiltered(string Platform, string ScanType, string ItemType, string Property, string FilterType, string Target)
    parameters:
    - id: Platform
      type: System.String
    - id: ScanType
      type: System.String
    - id: ItemType
      type: System.String
    - id: Property
      type: System.String
    - id: FilterType
      type: System.String
    - id: Target
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFiltered(Platform As String, ScanType As String, ItemType As String, Property As String, FilterType As String, Target As String) As Boolean
  overload: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String,Regex@)
  commentId: M:AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String,Regex@)
  id: IsFiltered(System.String,System.String,System.String,System.String,System.String,System.String,Regex@)
  parent: AttackSurfaceAnalyzer.Utils.Filter
  langs:
  - csharp
  - vb
  name: IsFiltered(String, String, String, String, String, String, out Regex)
  nameWithType: Filter.IsFiltered(String, String, String, String, String, String, out Regex)
  fullName: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String, System.String, System.String, System.String, System.String, System.String, out Regex)
  type: Method
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: IsFiltered
    path: ../Lib/Utils/Filter.cs
    startLine: 35
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static bool IsFiltered(string Platform, string ScanType, string ItemType, string Property, string FilterType, string Target, out Regex regex)
    parameters:
    - id: Platform
      type: System.String
    - id: ScanType
      type: System.String
    - id: ItemType
      type: System.String
    - id: Property
      type: System.String
    - id: FilterType
      type: System.String
    - id: Target
      type: System.String
    - id: regex
      type: Regex
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFiltered(Platform As String, ScanType As String, ItemType As String, Property As String, FilterType As String, Target As String, ByRef regex As Regex) As Boolean
  overload: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered*
  nameWithType.vb: Filter.IsFiltered(String, String, String, String, String, String, ByRef Regex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered(System.String, System.String, System.String, System.String, System.String, System.String, ByRef Regex)
  name.vb: IsFiltered(String, String, String, String, String, String, ByRef Regex)
- uid: AttackSurfaceAnalyzer.Utils.Filter.DumpFilters
  commentId: M:AttackSurfaceAnalyzer.Utils.Filter.DumpFilters
  id: DumpFilters
  parent: AttackSurfaceAnalyzer.Utils.Filter
  langs:
  - csharp
  - vb
  name: DumpFilters()
  nameWithType: Filter.DumpFilters()
  fullName: AttackSurfaceAnalyzer.Utils.Filter.DumpFilters()
  type: Method
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: DumpFilters
    path: ../Lib/Utils/Filter.cs
    startLine: 156
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void DumpFilters()
    content.vb: Public Shared Sub DumpFilters
  overload: AttackSurfaceAnalyzer.Utils.Filter.DumpFilters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters
  commentId: M:AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters
  id: LoadEmbeddedFilters
  parent: AttackSurfaceAnalyzer.Utils.Filter
  langs:
  - csharp
  - vb
  name: LoadEmbeddedFilters()
  nameWithType: Filter.LoadEmbeddedFilters()
  fullName: AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters()
  type: Method
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: LoadEmbeddedFilters
    path: ../Lib/Utils/Filter.cs
    startLine: 165
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void LoadEmbeddedFilters()
    content.vb: Public Shared Sub LoadEmbeddedFilters
  overload: AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Filter.LoadFilters(System.String)
  commentId: M:AttackSurfaceAnalyzer.Utils.Filter.LoadFilters(System.String)
  id: LoadFilters(System.String)
  parent: AttackSurfaceAnalyzer.Utils.Filter
  langs:
  - csharp
  - vb
  name: LoadFilters(String)
  nameWithType: Filter.LoadFilters(String)
  fullName: AttackSurfaceAnalyzer.Utils.Filter.LoadFilters(System.String)
  type: Method
  source:
    remote:
      path: Lib/Utils/Filter.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: LoadFilters
    path: ../Lib/Utils/Filter.cs
    startLine: 213
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void LoadFilters(string filterLoc = "filters.json")
    parameters:
    - id: filterLoc
      type: System.String
    content.vb: Public Shared Sub LoadFilters(filterLoc As String = "filters.json")
  overload: AttackSurfaceAnalyzer.Utils.Filter.LoadFilters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AttackSurfaceAnalyzer.Utils
  commentId: N:AttackSurfaceAnalyzer.Utils
  name: AttackSurfaceAnalyzer.Utils
  nameWithType: AttackSurfaceAnalyzer.Utils
  fullName: AttackSurfaceAnalyzer.Utils
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Filter.IsFiltered
  name: IsFiltered
  nameWithType: Filter.IsFiltered
  fullName: AttackSurfaceAnalyzer.Utils.Filter.IsFiltered
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Regex
  commentId: '!:Regex'
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: AttackSurfaceAnalyzer.Utils.Filter.DumpFilters*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Filter.DumpFilters
  name: DumpFilters
  nameWithType: Filter.DumpFilters
  fullName: AttackSurfaceAnalyzer.Utils.Filter.DumpFilters
- uid: AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters
  name: LoadEmbeddedFilters
  nameWithType: Filter.LoadEmbeddedFilters
  fullName: AttackSurfaceAnalyzer.Utils.Filter.LoadEmbeddedFilters
- uid: AttackSurfaceAnalyzer.Utils.Filter.LoadFilters*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Filter.LoadFilters
  name: LoadFilters
  nameWithType: Filter.LoadFilters
  fullName: AttackSurfaceAnalyzer.Utils.Filter.LoadFilters
