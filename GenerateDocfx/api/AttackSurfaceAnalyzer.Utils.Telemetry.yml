### YamlMime:ManagedReference
items:
- uid: AttackSurfaceAnalyzer.Utils.Telemetry
  commentId: T:AttackSurfaceAnalyzer.Utils.Telemetry
  id: Telemetry
  parent: AttackSurfaceAnalyzer.Utils
  children:
  - AttackSurfaceAnalyzer.Utils.Telemetry.Client
  - AttackSurfaceAnalyzer.Utils.Telemetry.Flush
  - AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut(System.Boolean)
  - AttackSurfaceAnalyzer.Utils.Telemetry.Setup(System.Boolean)
  - AttackSurfaceAnalyzer.Utils.Telemetry.TestMode
  - AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent(System.String,Dictionary{System.String,System.String})
  - AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace(SeverityLevel,Exception)
  langs:
  - csharp
  - vb
  name: Telemetry
  nameWithType: Telemetry
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry
  type: Class
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Telemetry
    path: ../Lib/Utils/Telemetry.cs
    startLine: 10
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: 'public class Telemetry : object'
    content.vb: >-
      Public Class Telemetry
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.Client
  commentId: F:AttackSurfaceAnalyzer.Utils.Telemetry.Client
  id: Client
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: Telemetry.Client
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.Client
  type: Field
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Client
    path: ../Lib/Utils/Telemetry.cs
    startLine: 16
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static TelemetryClient Client
    return:
      type: TelemetryClient
    content.vb: Public Shared Client As TelemetryClient
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.TestMode
  commentId: M:AttackSurfaceAnalyzer.Utils.Telemetry.TestMode
  id: TestMode
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: TestMode()
  nameWithType: Telemetry.TestMode()
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.TestMode()
  type: Method
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: TestMode
    path: ../Lib/Utils/Telemetry.cs
    startLine: 18
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void TestMode()
    content.vb: Public Shared Sub TestMode
  overload: AttackSurfaceAnalyzer.Utils.Telemetry.TestMode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.Setup(System.Boolean)
  commentId: M:AttackSurfaceAnalyzer.Utils.Telemetry.Setup(System.Boolean)
  id: Setup(System.Boolean)
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: Setup(Boolean)
  nameWithType: Telemetry.Setup(Boolean)
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.Setup(System.Boolean)
  type: Method
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Setup
    path: ../Lib/Utils/Telemetry.cs
    startLine: 24
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void Setup(bool Gui)
    parameters:
    - id: Gui
      type: System.Boolean
    content.vb: Public Shared Sub Setup(Gui As Boolean)
  overload: AttackSurfaceAnalyzer.Utils.Telemetry.Setup*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.Flush
  commentId: M:AttackSurfaceAnalyzer.Utils.Telemetry.Flush
  id: Flush
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: Telemetry.Flush()
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.Flush()
  type: Method
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Flush
    path: ../Lib/Utils/Telemetry.cs
    startLine: 48
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void Flush()
    content.vb: Public Shared Sub Flush
  overload: AttackSurfaceAnalyzer.Utils.Telemetry.Flush*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut(System.Boolean)
  commentId: M:AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut(System.Boolean)
  id: SetOptOut(System.Boolean)
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: SetOptOut(Boolean)
  nameWithType: Telemetry.SetOptOut(Boolean)
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut(System.Boolean)
  type: Method
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: SetOptOut
    path: ../Lib/Utils/Telemetry.cs
    startLine: 53
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void SetOptOut(bool OptOut)
    parameters:
    - id: OptOut
      type: System.Boolean
    content.vb: Public Shared Sub SetOptOut(OptOut As Boolean)
  overload: AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent(System.String,Dictionary{System.String,System.String})
  commentId: M:AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent(System.String,Dictionary{System.String,System.String})
  id: TrackEvent(System.String,Dictionary{System.String,System.String})
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: TrackEvent(String, Dictionary<String, String>)
  nameWithType: Telemetry.TrackEvent(String, Dictionary<String, String>)
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent(System.String, Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: TrackEvent
    path: ../Lib/Utils/Telemetry.cs
    startLine: 64
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void TrackEvent(string name, Dictionary<string, string> evt)
    parameters:
    - id: name
      type: System.String
    - id: evt
      type: Dictionary{System.String,System.String}
    content.vb: Public Shared Sub TrackEvent(name As String, evt As Dictionary(Of String, String))
  overload: AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent*
  nameWithType.vb: Telemetry.TrackEvent(String, Dictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent(System.String, Dictionary(Of System.String, System.String))
  name.vb: TrackEvent(String, Dictionary(Of String, String))
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace(SeverityLevel,Exception)
  commentId: M:AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace(SeverityLevel,Exception)
  id: TrackTrace(SeverityLevel,Exception)
  parent: AttackSurfaceAnalyzer.Utils.Telemetry
  langs:
  - csharp
  - vb
  name: TrackTrace(SeverityLevel, Exception)
  nameWithType: Telemetry.TrackTrace(SeverityLevel, Exception)
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace(SeverityLevel, Exception)
  type: Method
  source:
    remote:
      path: Lib/Utils/Telemetry.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: TrackTrace
    path: ../Lib/Utils/Telemetry.cs
    startLine: 73
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static void TrackTrace(SeverityLevel severityLevel, Exception e)
    parameters:
    - id: severityLevel
      type: SeverityLevel
    - id: e
      type: Exception
    content.vb: Public Shared Sub TrackTrace(severityLevel As SeverityLevel, e As Exception)
  overload: AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AttackSurfaceAnalyzer.Utils
  commentId: N:AttackSurfaceAnalyzer.Utils
  name: AttackSurfaceAnalyzer.Utils
  nameWithType: AttackSurfaceAnalyzer.Utils
  fullName: AttackSurfaceAnalyzer.Utils
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TelemetryClient
  commentId: '!:TelemetryClient'
  isExternal: true
  name: TelemetryClient
  nameWithType: TelemetryClient
  fullName: TelemetryClient
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.TestMode*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Telemetry.TestMode
  name: TestMode
  nameWithType: Telemetry.TestMode
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.TestMode
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.Setup*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Telemetry.Setup
  name: Setup
  nameWithType: Telemetry.Setup
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.Setup
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.Flush*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Telemetry.Flush
  name: Flush
  nameWithType: Telemetry.Flush
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.Flush
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut
  name: SetOptOut
  nameWithType: Telemetry.SetOptOut
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.SetOptOut
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent
  name: TrackEvent
  nameWithType: Telemetry.TrackEvent
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.TrackEvent
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace
  name: TrackTrace
  nameWithType: Telemetry.TrackTrace
  fullName: AttackSurfaceAnalyzer.Utils.Telemetry.TrackTrace
- uid: SeverityLevel
  commentId: '!:SeverityLevel'
  isExternal: true
  name: SeverityLevel
  nameWithType: SeverityLevel
  fullName: SeverityLevel
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
