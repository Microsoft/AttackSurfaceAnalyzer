### YamlMime:ManagedReference
items:
- uid: AttackSurfaceAnalyzer.Utils.DirectoryWalker
  commentId: T:AttackSurfaceAnalyzer.Utils.DirectoryWalker
  id: DirectoryWalker
  parent: AttackSurfaceAnalyzer.Utils
  children:
  - AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory(System.String)
  langs:
  - csharp
  - vb
  name: DirectoryWalker
  nameWithType: DirectoryWalker
  fullName: AttackSurfaceAnalyzer.Utils.DirectoryWalker
  type: Class
  source:
    remote:
      path: Lib/Utils/DirectoryWalker.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: DirectoryWalker
    path: ../Lib/Utils/DirectoryWalker.cs
    startLine: 9
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: 'public class DirectoryWalker : object'
    content.vb: >-
      Public Class DirectoryWalker
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory(System.String)
  commentId: M:AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory(System.String)
  id: WalkDirectory(System.String)
  parent: AttackSurfaceAnalyzer.Utils.DirectoryWalker
  langs:
  - csharp
  - vb
  name: WalkDirectory(String)
  nameWithType: DirectoryWalker.WalkDirectory(String)
  fullName: AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory(System.String)
  type: Method
  source:
    remote:
      path: Lib/Utils/DirectoryWalker.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: WalkDirectory
    path: ../Lib/Utils/DirectoryWalker.cs
    startLine: 11
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static IEnumerable<FileSystemInfo> WalkDirectory(string root)
    parameters:
    - id: root
      type: System.String
    return:
      type: IEnumerable{FileSystemInfo}
    content.vb: Public Shared Function WalkDirectory(root As String) As IEnumerable(Of FileSystemInfo)
  overload: AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AttackSurfaceAnalyzer.Utils
  commentId: N:AttackSurfaceAnalyzer.Utils
  name: AttackSurfaceAnalyzer.Utils
  nameWithType: AttackSurfaceAnalyzer.Utils
  fullName: AttackSurfaceAnalyzer.Utils
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory
  name: WalkDirectory
  nameWithType: DirectoryWalker.WalkDirectory
  fullName: AttackSurfaceAnalyzer.Utils.DirectoryWalker.WalkDirectory
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable{FileSystemInfo}
  commentId: '!:IEnumerable{FileSystemInfo}'
  definition: IEnumerable`1
  name: IEnumerable<FileSystemInfo>
  nameWithType: IEnumerable<FileSystemInfo>
  fullName: IEnumerable<FileSystemInfo>
  nameWithType.vb: IEnumerable(Of FileSystemInfo)
  fullName.vb: IEnumerable(Of FileSystemInfo)
  name.vb: IEnumerable(Of FileSystemInfo)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
