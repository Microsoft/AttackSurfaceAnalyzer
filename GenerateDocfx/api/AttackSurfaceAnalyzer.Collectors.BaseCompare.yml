### YamlMime:ManagedReference
items:
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare
  commentId: T:AttackSurfaceAnalyzer.Collectors.BaseCompare
  id: BaseCompare
  parent: AttackSurfaceAnalyzer.Collectors
  children:
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.#ctor
  - AttackSurfaceAnalyzer.Collectors.BaseCompare._type
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare(System.String,System.String)
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(FieldInfo,System.Object,System.Object)
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(PropertyInfo,System.Object,System.Object)
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate(AttackSurfaceAnalyzer.Objects.RawCollectResult)
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.Results
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.Start
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop
  - AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare(System.String,System.String)
  langs:
  - csharp
  - vb
  name: BaseCompare
  nameWithType: BaseCompare
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare
  type: Class
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: BaseCompare
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 15
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: 'public class BaseCompare : object'
    content.vb: >-
      Public Class BaseCompare
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Results
  commentId: P:AttackSurfaceAnalyzer.Collectors.BaseCompare.Results
  id: Results
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: Results
  nameWithType: BaseCompare.Results
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Results
  type: Property
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Results
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 17
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public Dictionary<string, List<CompareResult>> Results { get; protected set; }
    parameters: []
    return:
      type: Dictionary{System.String,List{AttackSurfaceAnalyzer.Objects.CompareResult}}
    content.vb: Public Property Results As Dictionary(Of String, List(Of CompareResult))
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.Results*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.#ctor
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.#ctor
  id: '#ctor'
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: BaseCompare()
  nameWithType: BaseCompare.BaseCompare()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.BaseCompare()
  type: Constructor
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: .ctor
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 19
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public BaseCompare()
    content.vb: Public Sub New
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate(AttackSurfaceAnalyzer.Objects.RawCollectResult)
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate(AttackSurfaceAnalyzer.Objects.RawCollectResult)
  id: Hydrate(AttackSurfaceAnalyzer.Objects.RawCollectResult)
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: Hydrate(RawCollectResult)
  nameWithType: BaseCompare.Hydrate(RawCollectResult)
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate(AttackSurfaceAnalyzer.Objects.RawCollectResult)
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Hydrate
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 24
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public CollectObject Hydrate(RawCollectResult res)
    parameters:
    - id: res
      type: AttackSurfaceAnalyzer.Objects.RawCollectResult
    return:
      type: AttackSurfaceAnalyzer.Objects.CollectObject
    content.vb: Public Function Hydrate(res As RawCollectResult) As CollectObject
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare(System.String,System.String)
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  nameWithType: BaseCompare.Compare(String, String)
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Compare
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 49
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public void Compare(string firstRunId, string secondRunId)
    parameters:
    - id: firstRunId
      type: System.String
    - id: secondRunId
      type: System.String
    content.vb: Public Sub Compare(firstRunId As String, secondRunId As String)
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(FieldInfo,System.Object,System.Object)
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(FieldInfo,System.Object,System.Object)
  id: GetDiffs(FieldInfo,System.Object,System.Object)
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: GetDiffs(FieldInfo, Object, Object)
  nameWithType: BaseCompare.GetDiffs(FieldInfo, Object, Object)
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(FieldInfo, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: GetDiffs
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 338
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public List<Diff> GetDiffs(FieldInfo field, object added, object removed)
    parameters:
    - id: field
      type: FieldInfo
    - id: added
      type: System.Object
    - id: removed
      type: System.Object
    return:
      type: List{AttackSurfaceAnalyzer.Objects.Diff}
    content.vb: Public Function GetDiffs(field As FieldInfo, added As Object, removed As Object) As List(Of Diff)
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(PropertyInfo,System.Object,System.Object)
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(PropertyInfo,System.Object,System.Object)
  id: GetDiffs(PropertyInfo,System.Object,System.Object)
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: GetDiffs(PropertyInfo, Object, Object)
  nameWithType: BaseCompare.GetDiffs(PropertyInfo, Object, Object)
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs(PropertyInfo, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: GetDiffs
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 359
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public List<Diff> GetDiffs(PropertyInfo prop, object added, object removed)
    parameters:
    - id: prop
      type: PropertyInfo
    - id: added
      type: System.Object
    - id: removed
      type: System.Object
    return:
      type: List{AttackSurfaceAnalyzer.Objects.Diff}
    content.vb: Public Function GetDiffs(prop As PropertyInfo, added As Object, removed As Object) As List(Of Diff)
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare(System.String,System.String)
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare(System.String,System.String)
  id: TryCompare(System.String,System.String)
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: TryCompare(String, String)
  nameWithType: BaseCompare.TryCompare(String, String)
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare(System.String, System.String)
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: TryCompare
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 381
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public bool TryCompare(string firstRunId, string secondRunId)
    parameters:
    - id: firstRunId
      type: System.String
    - id: secondRunId
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function TryCompare(firstRunId As String, secondRunId As String) As Boolean
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare._type
  commentId: F:AttackSurfaceAnalyzer.Collectors.BaseCompare._type
  id: _type
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: _type
  nameWithType: BaseCompare._type
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare._type
  type: Field
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: _type
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 401
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: protected RESULT_TYPE _type
    return:
      type: AttackSurfaceAnalyzer.Types.RESULT_TYPE
    content.vb: Protected _type As RESULT_TYPE
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning
  id: IsRunning
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: IsRunning()
  nameWithType: BaseCompare.IsRunning()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning()
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: IsRunning
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 403
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public RUN_STATUS IsRunning()
    return:
      type: AttackSurfaceAnalyzer.Types.RUN_STATUS
    content.vb: Public Function IsRunning As RUN_STATUS
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Start
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.Start
  id: Start
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: BaseCompare.Start()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Start()
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Start
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 408
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop
  id: Stop
  parent: AttackSurfaceAnalyzer.Collectors.BaseCompare
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: BaseCompare.Stop()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop()
  type: Method
  source:
    remote:
      path: Lib/Collectors/BaseCompare.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Stop
    path: ../Lib/Collectors/BaseCompare.cs
    startLine: 414
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AttackSurfaceAnalyzer.Collectors
  commentId: N:AttackSurfaceAnalyzer.Collectors
  name: AttackSurfaceAnalyzer.Collectors
  nameWithType: AttackSurfaceAnalyzer.Collectors
  fullName: AttackSurfaceAnalyzer.Collectors
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Results*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.Results
  name: Results
  nameWithType: BaseCompare.Results
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Results
- uid: Dictionary{System.String,List{AttackSurfaceAnalyzer.Objects.CompareResult}}
  commentId: '!:Dictionary{System.String,List{AttackSurfaceAnalyzer.Objects.CompareResult}}'
  definition: Dictionary`2
  name: Dictionary<String, List<CompareResult>>
  nameWithType: Dictionary<String, List<CompareResult>>
  fullName: Dictionary<System.String, List<AttackSurfaceAnalyzer.Objects.CompareResult>>
  nameWithType.vb: Dictionary(Of String, List(Of CompareResult))
  fullName.vb: Dictionary(Of System.String, List(Of AttackSurfaceAnalyzer.Objects.CompareResult))
  name.vb: Dictionary(Of String, List(Of CompareResult))
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AttackSurfaceAnalyzer.Objects.CompareResult
    name: CompareResult
    nameWithType: CompareResult
    fullName: AttackSurfaceAnalyzer.Objects.CompareResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AttackSurfaceAnalyzer.Objects.CompareResult
    name: CompareResult
    nameWithType: CompareResult
    fullName: AttackSurfaceAnalyzer.Objects.CompareResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.#ctor*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.#ctor
  name: BaseCompare
  nameWithType: BaseCompare.BaseCompare
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.BaseCompare
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate
  name: Hydrate
  nameWithType: BaseCompare.Hydrate
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Hydrate
- uid: AttackSurfaceAnalyzer.Objects.RawCollectResult
  commentId: T:AttackSurfaceAnalyzer.Objects.RawCollectResult
  parent: AttackSurfaceAnalyzer.Objects
  name: RawCollectResult
  nameWithType: RawCollectResult
  fullName: AttackSurfaceAnalyzer.Objects.RawCollectResult
- uid: AttackSurfaceAnalyzer.Objects.CollectObject
  commentId: T:AttackSurfaceAnalyzer.Objects.CollectObject
  parent: AttackSurfaceAnalyzer.Objects
  name: CollectObject
  nameWithType: CollectObject
  fullName: AttackSurfaceAnalyzer.Objects.CollectObject
- uid: AttackSurfaceAnalyzer.Objects
  commentId: N:AttackSurfaceAnalyzer.Objects
  name: AttackSurfaceAnalyzer.Objects
  nameWithType: AttackSurfaceAnalyzer.Objects
  fullName: AttackSurfaceAnalyzer.Objects
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare
  name: Compare
  nameWithType: BaseCompare.Compare
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Compare
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs
  name: GetDiffs
  nameWithType: BaseCompare.GetDiffs
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.GetDiffs
- uid: FieldInfo
  commentId: '!:FieldInfo'
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: FieldInfo
- uid: List{AttackSurfaceAnalyzer.Objects.Diff}
  commentId: '!:List{AttackSurfaceAnalyzer.Objects.Diff}'
  definition: List`1
  name: List<Diff>
  nameWithType: List<Diff>
  fullName: List<AttackSurfaceAnalyzer.Objects.Diff>
  nameWithType.vb: List(Of Diff)
  fullName.vb: List(Of AttackSurfaceAnalyzer.Objects.Diff)
  name.vb: List(Of Diff)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AttackSurfaceAnalyzer.Objects.Diff
    name: Diff
    nameWithType: Diff
    fullName: AttackSurfaceAnalyzer.Objects.Diff
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AttackSurfaceAnalyzer.Objects.Diff
    name: Diff
    nameWithType: Diff
    fullName: AttackSurfaceAnalyzer.Objects.Diff
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: PropertyInfo
  commentId: '!:PropertyInfo'
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: PropertyInfo
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare
  name: TryCompare
  nameWithType: BaseCompare.TryCompare
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.TryCompare
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AttackSurfaceAnalyzer.Types.RESULT_TYPE
  commentId: T:AttackSurfaceAnalyzer.Types.RESULT_TYPE
  parent: AttackSurfaceAnalyzer.Types
  name: RESULT_TYPE
  nameWithType: RESULT_TYPE
  fullName: AttackSurfaceAnalyzer.Types.RESULT_TYPE
- uid: AttackSurfaceAnalyzer.Types
  commentId: N:AttackSurfaceAnalyzer.Types
  name: AttackSurfaceAnalyzer.Types
  nameWithType: AttackSurfaceAnalyzer.Types
  fullName: AttackSurfaceAnalyzer.Types
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning
  name: IsRunning
  nameWithType: BaseCompare.IsRunning
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.IsRunning
- uid: AttackSurfaceAnalyzer.Types.RUN_STATUS
  commentId: T:AttackSurfaceAnalyzer.Types.RUN_STATUS
  parent: AttackSurfaceAnalyzer.Types
  name: RUN_STATUS
  nameWithType: RUN_STATUS
  fullName: AttackSurfaceAnalyzer.Types.RUN_STATUS
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Start*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.Start
  name: Start
  nameWithType: BaseCompare.Start
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Start
- uid: AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop
  name: Stop
  nameWithType: BaseCompare.Stop
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCompare.Stop
