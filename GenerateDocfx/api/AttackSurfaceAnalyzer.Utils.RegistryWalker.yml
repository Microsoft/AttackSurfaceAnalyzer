### YamlMime:ManagedReference
items:
- uid: AttackSurfaceAnalyzer.Utils.RegistryWalker
  commentId: T:AttackSurfaceAnalyzer.Utils.RegistryWalker
  id: RegistryWalker
  parent: AttackSurfaceAnalyzer.Utils
  children:
  - AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive(RegistryHive,System.String)
  langs:
  - csharp
  - vb
  name: RegistryWalker
  nameWithType: RegistryWalker
  fullName: AttackSurfaceAnalyzer.Utils.RegistryWalker
  type: Class
  source:
    remote:
      path: Lib/Utils/RegistryWalker.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: RegistryWalker
    path: ../Lib/Utils/RegistryWalker.cs
    startLine: 11
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: 'public class RegistryWalker : object'
    content.vb: >-
      Public Class RegistryWalker
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive(RegistryHive,System.String)
  commentId: M:AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive(RegistryHive,System.String)
  id: WalkHive(RegistryHive,System.String)
  parent: AttackSurfaceAnalyzer.Utils.RegistryWalker
  langs:
  - csharp
  - vb
  name: WalkHive(RegistryHive, String)
  nameWithType: RegistryWalker.WalkHive(RegistryHive, String)
  fullName: AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive(RegistryHive, System.String)
  type: Method
  source:
    remote:
      path: Lib/Utils/RegistryWalker.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: WalkHive
    path: ../Lib/Utils/RegistryWalker.cs
    startLine: 14
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Utils
  syntax:
    content: public static IEnumerable<RegistryObject> WalkHive(RegistryHive Hive, string runid = null)
    parameters:
    - id: Hive
      type: RegistryHive
    - id: runid
      type: System.String
    return:
      type: IEnumerable{AttackSurfaceAnalyzer.Objects.RegistryObject}
    content.vb: Public Shared Function WalkHive(Hive As RegistryHive, runid As String = Nothing) As IEnumerable(Of RegistryObject)
  overload: AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AttackSurfaceAnalyzer.Utils
  commentId: N:AttackSurfaceAnalyzer.Utils
  name: AttackSurfaceAnalyzer.Utils
  nameWithType: AttackSurfaceAnalyzer.Utils
  fullName: AttackSurfaceAnalyzer.Utils
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive*
  commentId: Overload:AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive
  name: WalkHive
  nameWithType: RegistryWalker.WalkHive
  fullName: AttackSurfaceAnalyzer.Utils.RegistryWalker.WalkHive
- uid: RegistryHive
  commentId: '!:RegistryHive'
  isExternal: true
  name: RegistryHive
  nameWithType: RegistryHive
  fullName: RegistryHive
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable{AttackSurfaceAnalyzer.Objects.RegistryObject}
  commentId: '!:IEnumerable{AttackSurfaceAnalyzer.Objects.RegistryObject}'
  definition: IEnumerable`1
  name: IEnumerable<RegistryObject>
  nameWithType: IEnumerable<RegistryObject>
  fullName: IEnumerable<AttackSurfaceAnalyzer.Objects.RegistryObject>
  nameWithType.vb: IEnumerable(Of RegistryObject)
  fullName.vb: IEnumerable(Of AttackSurfaceAnalyzer.Objects.RegistryObject)
  name.vb: IEnumerable(Of RegistryObject)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AttackSurfaceAnalyzer.Objects.RegistryObject
    name: RegistryObject
    nameWithType: RegistryObject
    fullName: AttackSurfaceAnalyzer.Objects.RegistryObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AttackSurfaceAnalyzer.Objects.RegistryObject
    name: RegistryObject
    nameWithType: RegistryObject
    fullName: AttackSurfaceAnalyzer.Objects.RegistryObject
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
