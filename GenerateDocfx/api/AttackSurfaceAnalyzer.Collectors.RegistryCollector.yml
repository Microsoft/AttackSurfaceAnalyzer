### YamlMime:ManagedReference
items:
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  commentId: T:AttackSurfaceAnalyzer.Collectors.RegistryCollector
  id: RegistryCollector
  parent: AttackSurfaceAnalyzer.Collectors
  children:
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String)
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String,List{RegistryHive})
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String,List{RegistryHive},Action{AttackSurfaceAnalyzer.Objects.RegistryObject})
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot(System.String)
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots
  - AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute
  langs:
  - csharp
  - vb
  name: RegistryCollector
  nameWithType: RegistryCollector
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  type: Class
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: RegistryCollector
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 17
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: 'public class RegistryCollector : BaseCollector, PlatformRunnable'
    content.vb: >-
      Public Class RegistryCollector
          Inherits BaseCollector
          Implements PlatformRunnable
  inheritance:
  - System.Object
  - AttackSurfaceAnalyzer.Collectors.BaseCollector
  inheritedMembers:
  - AttackSurfaceAnalyzer.Collectors.BaseCollector.runId
  - AttackSurfaceAnalyzer.Collectors.BaseCollector._numCollected
  - AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
  - AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
  - AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
  - AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String)
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: RegistryCollector(String)
  nameWithType: RegistryCollector.RegistryCollector(String)
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.RegistryCollector(System.String)
  type: Constructor
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: .ctor
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 31
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public RegistryCollector(string RunId)
    parameters:
    - id: RunId
      type: System.String
    content.vb: Public Sub New(RunId As String)
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String,List{RegistryHive})
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String,List{RegistryHive})
  id: '#ctor(System.String,List{RegistryHive})'
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: RegistryCollector(String, List<RegistryHive>)
  nameWithType: RegistryCollector.RegistryCollector(String, List<RegistryHive>)
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.RegistryCollector(System.String, List<RegistryHive>)
  type: Constructor
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: .ctor
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 33
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public RegistryCollector(string RunId, List<RegistryHive> Hives)
    parameters:
    - id: RunId
      type: System.String
    - id: Hives
      type: List{RegistryHive}
    content.vb: Public Sub New(RunId As String, Hives As List(Of RegistryHive))
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor*
  nameWithType.vb: RegistryCollector.RegistryCollector(String, List(Of RegistryHive))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AttackSurfaceAnalyzer.Collectors.RegistryCollector.RegistryCollector(System.String, List(Of RegistryHive))
  name.vb: RegistryCollector(String, List(Of RegistryHive))
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String,List{RegistryHive},Action{AttackSurfaceAnalyzer.Objects.RegistryObject})
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor(System.String,List{RegistryHive},Action{AttackSurfaceAnalyzer.Objects.RegistryObject})
  id: '#ctor(System.String,List{RegistryHive},Action{AttackSurfaceAnalyzer.Objects.RegistryObject})'
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: RegistryCollector(String, List<RegistryHive>, Action<RegistryObject>)
  nameWithType: RegistryCollector.RegistryCollector(String, List<RegistryHive>, Action<RegistryObject>)
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.RegistryCollector(System.String, List<RegistryHive>, Action<AttackSurfaceAnalyzer.Objects.RegistryObject>)
  type: Constructor
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: .ctor
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 35
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public RegistryCollector(string RunId, List<RegistryHive> Hives, Action<RegistryObject> customHandler)
    parameters:
    - id: RunId
      type: System.String
    - id: Hives
      type: List{RegistryHive}
    - id: customHandler
      type: Action{AttackSurfaceAnalyzer.Objects.RegistryObject}
    content.vb: Public Sub New(RunId As String, Hives As List(Of RegistryHive), customHandler As Action(Of RegistryObject))
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor*
  nameWithType.vb: RegistryCollector.RegistryCollector(String, List(Of RegistryHive), Action(Of RegistryObject))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AttackSurfaceAnalyzer.Collectors.RegistryCollector.RegistryCollector(System.String, List(Of RegistryHive), Action(Of AttackSurfaceAnalyzer.Objects.RegistryObject))
  name.vb: RegistryCollector(String, List(Of RegistryHive), Action(Of RegistryObject))
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot(System.String)
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot(System.String)
  id: AddRoot(System.String)
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: AddRoot(String)
  nameWithType: RegistryCollector.AddRoot(String)
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot(System.String)
  type: Method
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: AddRoot
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 45
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public void AddRoot(string root)
    parameters:
    - id: root
      type: System.String
    content.vb: Public Sub AddRoot(root As String)
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots
  id: ClearRoots
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: ClearRoots()
  nameWithType: RegistryCollector.ClearRoots()
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots()
  type: Method
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: ClearRoots
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 50
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public void ClearRoots()
    content.vb: Public Sub ClearRoots
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform
  id: CanRunOnPlatform
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: CanRunOnPlatform()
  nameWithType: RegistryCollector.CanRunOnPlatform()
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform()
  type: Method
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: CanRunOnPlatform
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 55
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public override bool CanRunOnPlatform()
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanRunOnPlatform As Boolean
  overridden: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute
  commentId: M:AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute
  id: Execute
  parent: AttackSurfaceAnalyzer.Collectors.RegistryCollector
  langs:
  - csharp
  - vb
  name: Execute()
  nameWithType: RegistryCollector.Execute()
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute()
  type: Method
  source:
    remote:
      path: Lib/Collectors/RegistryCollector.cs
      branch: gfs/FunctionalTests
      repo: https://github.com/Microsoft/AttackSurfaceAnalyzer.git
    id: Execute
    path: ../Lib/Collectors/RegistryCollector.cs
    startLine: 60
  assemblies:
  - AsaLib
  namespace: AttackSurfaceAnalyzer.Collectors
  syntax:
    content: public override void Execute()
    content.vb: Public Overrides Sub Execute
  overridden: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
  overload: AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: AttackSurfaceAnalyzer.Collectors
  commentId: N:AttackSurfaceAnalyzer.Collectors
  name: AttackSurfaceAnalyzer.Collectors
  nameWithType: AttackSurfaceAnalyzer.Collectors
  fullName: AttackSurfaceAnalyzer.Collectors
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector
  commentId: T:AttackSurfaceAnalyzer.Collectors.BaseCollector
  parent: AttackSurfaceAnalyzer.Collectors
  name: BaseCollector
  nameWithType: BaseCollector
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.runId
  commentId: F:AttackSurfaceAnalyzer.Collectors.BaseCollector.runId
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: runId
  nameWithType: BaseCollector.runId
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.runId
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector._numCollected
  commentId: F:AttackSurfaceAnalyzer.Collectors.BaseCollector._numCollected
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: _numCollected
  nameWithType: BaseCollector._numCollected
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector._numCollected
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: IsRunning()
  nameWithType: BaseCollector.IsRunning()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning()
  spec.csharp:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
    name: IsRunning
    nameWithType: BaseCollector.IsRunning
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
    name: IsRunning
    nameWithType: BaseCollector.IsRunning
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.IsRunning
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: Start()
  nameWithType: BaseCollector.Start()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Start()
  spec.csharp:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
    name: Start
    nameWithType: BaseCollector.Start
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
    name: Start
    nameWithType: BaseCollector.Start
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: Stop()
  nameWithType: BaseCollector.Stop()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop()
  spec.csharp:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
    name: Stop
    nameWithType: BaseCollector.Stop
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
    name: Stop
    nameWithType: BaseCollector.Stop
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Stop
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: NumCollected()
  nameWithType: BaseCollector.NumCollected()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected()
  spec.csharp:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
    name: NumCollected
    nameWithType: BaseCollector.NumCollected
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
    name: NumCollected
    nameWithType: BaseCollector.NumCollected
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.NumCollected
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.RegistryCollector.#ctor
  name: RegistryCollector
  nameWithType: RegistryCollector.RegistryCollector
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.RegistryCollector
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: List{RegistryHive}
  commentId: '!:List{RegistryHive}'
  definition: List`1
  name: List<RegistryHive>
  nameWithType: List<RegistryHive>
  fullName: List<RegistryHive>
  nameWithType.vb: List(Of RegistryHive)
  fullName.vb: List(Of RegistryHive)
  name.vb: List(Of RegistryHive)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RegistryHive
    name: RegistryHive
    nameWithType: RegistryHive
    fullName: RegistryHive
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RegistryHive
    name: RegistryHive
    nameWithType: RegistryHive
    fullName: RegistryHive
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{AttackSurfaceAnalyzer.Objects.RegistryObject}
  commentId: '!:Action{AttackSurfaceAnalyzer.Objects.RegistryObject}'
  definition: Action`1
  name: Action<RegistryObject>
  nameWithType: Action<RegistryObject>
  fullName: Action<AttackSurfaceAnalyzer.Objects.RegistryObject>
  nameWithType.vb: Action(Of RegistryObject)
  fullName.vb: Action(Of AttackSurfaceAnalyzer.Objects.RegistryObject)
  name.vb: Action(Of RegistryObject)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AttackSurfaceAnalyzer.Objects.RegistryObject
    name: RegistryObject
    nameWithType: RegistryObject
    fullName: AttackSurfaceAnalyzer.Objects.RegistryObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AttackSurfaceAnalyzer.Objects.RegistryObject
    name: RegistryObject
    nameWithType: RegistryObject
    fullName: AttackSurfaceAnalyzer.Objects.RegistryObject
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot
  name: AddRoot
  nameWithType: RegistryCollector.AddRoot
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.AddRoot
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots
  name: ClearRoots
  nameWithType: RegistryCollector.ClearRoots
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.ClearRoots
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: CanRunOnPlatform()
  nameWithType: BaseCollector.CanRunOnPlatform()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform()
  spec.csharp:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
    name: CanRunOnPlatform
    nameWithType: BaseCollector.CanRunOnPlatform
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
    name: CanRunOnPlatform
    nameWithType: BaseCollector.CanRunOnPlatform
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.CanRunOnPlatform
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform
  name: CanRunOnPlatform
  nameWithType: RegistryCollector.CanRunOnPlatform
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.CanRunOnPlatform
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
  commentId: M:AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
  parent: AttackSurfaceAnalyzer.Collectors.BaseCollector
  name: Execute()
  nameWithType: BaseCollector.Execute()
  fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute()
  spec.csharp:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
    name: Execute
    nameWithType: BaseCollector.Execute
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
    name: Execute
    nameWithType: BaseCollector.Execute
    fullName: AttackSurfaceAnalyzer.Collectors.BaseCollector.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute*
  commentId: Overload:AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute
  name: Execute
  nameWithType: RegistryCollector.Execute
  fullName: AttackSurfaceAnalyzer.Collectors.RegistryCollector.Execute
