@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData
@using Microsoft.CST.AttackSurfaceAnalyzer.Cli

<p>
    <input class="@enableFileSystemCollectionCheckboxGlowClass.ClassName" id="enableFileSystemCollectionCheckbox" type="checkbox" @bind="EnableFileSystemCollector" />
    <label for="enableFileSystemCollectionCheckbox">Enable FileSystem Collector</label>
    <input class="@enableGatherHashesCheckboxGlowClass.ClassName" id="enableGatherHashesCheckbox" type="checkbox" @bind="enableGatherHashes" />
    <label for="enableGatherHashesCheckbox">Gather File Hashes</label>
    <input class="@enableCrawlArchivesCheckboxGlowClass.ClassName" id="enableCrawlArchivesCheckbox" type="checkbox" @bind="enableCrawlArchives" />
    <label for="enableCrawlArchivesCheckbox">Crawl into Archives</label>
    <input class="@enableDownloadCloudCheckboxGlowClass.ClassName" id="enableDownloadCloudCheckbox" type="checkbox" @bind="enableDownloadCloud" />
    <label for="enableDownloadCloudCheckbox">Download Cloud Files</label>
</p>
<p>
    <input id="selectedDirectoriesString" type="text" @bind="SelectedDirectories" /><label for="selectedDirectoriesString">Selected Directories</label>
</p>

@code{
    Helper.GlowClass enableFileSystemCollectionCheckboxGlowClass = new Helper.GlowClass();
    Helper.GlowClass enableGatherHashesCheckboxGlowClass = new Helper.GlowClass();
    Helper.GlowClass enableCrawlArchivesCheckboxGlowClass = new Helper.GlowClass();
    Helper.GlowClass enableDownloadCloudCheckboxGlowClass = new Helper.GlowClass();

    bool enableGatherHashes
    {
        get { return appData.CollectOptions.GatherHashes; }
        set { appData.CollectOptions.GatherHashes = value; Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableGatherHashesCheckboxGlowClass, value);        }
    }

    bool enableCrawlArchives
    {
        get { return appData.CollectOptions.CrawlArchives; }
        set { appData.CollectOptions.CrawlArchives = value; Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableCrawlArchivesCheckboxGlowClass, value);        }
    }

    bool enableDownloadCloud
    {
        get { return appData.CollectOptions.DownloadCloud; }
        set { appData.CollectOptions.DownloadCloud = value; Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableDownloadCloudCheckboxGlowClass, value); }
    }

    bool EnableFileSystemCollector
    {
        get
        {
            return appData.CollectOptions.EnableFileSystemCollector;
        }
        set
        {
            appData.CollectOptions.EnableFileSystemCollector = value;
            Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableFileSystemCollectionCheckboxGlowClass, value);
        }
    }

    string SelectedDirectories
    {
        get
        {
            return string.Join(',', appData.CollectOptions.SelectedDirectories ?? Array.Empty<string>());
        }
        set
        {
            appData.CollectOptions.SelectedDirectories = value.Split(',');
        }
    }
}