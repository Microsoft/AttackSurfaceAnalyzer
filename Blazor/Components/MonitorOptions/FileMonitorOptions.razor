@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData
@using Microsoft.CST.AttackSurfaceAnalyzer.Cli

<p>
    <input class="@enableFileSystemMonitorCheckboxGlowClass.ClassName" id="enableFileSystemMonitorCheckbox" type="checkbox" @bind="EnableFileSystemMonitor" />
    <label for="enableFileSystemMonitorCheckbox">Enable FileSystem Monitor</label>
    <input class="@enableGatherHashesCheckboxGlowClass.ClassName" id="enableGatherHashesMonitorCheckbox" type="checkbox" @bind="enableGatherHashes" />
    <label for="enableGatherHashesMonitorCheckbox">Gather File Hashes</label>
    <input class="@enableFileNamesOnlyCheckboxGlowClass.ClassName" id="enableFileNamesOnlyCheckbox" type="checkbox" @bind="enableNamesOnly" />
    <label for="enableFileNamesOnlyCheckbox">Crawl into Archives</label>
</p>
<p>
    <input id="selectedDirectoriesString" type="text" @bind="SelectedDirectories" /><label for="selectedDirectoriesString">Selected Directories</label>
</p>

@code{
    Helper.GlowClass enableFileSystemMonitorCheckboxGlowClass = new Helper.GlowClass();
    Helper.GlowClass enableGatherHashesCheckboxGlowClass = new Helper.GlowClass();
    Helper.GlowClass enableFileNamesOnlyCheckboxGlowClass = new Helper.GlowClass();

    bool enableGatherHashes
    {
        get { return appData.MonitorOptions.GatherHashes; }
        set { appData.MonitorOptions.GatherHashes = value; Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableGatherHashesCheckboxGlowClass, value); }
    }

    bool enableNamesOnly
    {
        get { return appData.MonitorOptions.FileNamesOnly; }
        set { appData.MonitorOptions.FileNamesOnly = value; Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableFileNamesOnlyCheckboxGlowClass, value); }
    }

    bool EnableFileSystemMonitor
    {
        get
        {
            return appData.MonitorOptions.EnableFileSystemMonitor;
        }
        set
        {
            appData.MonitorOptions.EnableFileSystemMonitor = value;
            Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), enableFileSystemMonitorCheckboxGlowClass, value);
        }
    }

    string SelectedDirectories
    {
        get
        {
            return string.Join(',', appData.MonitorOptions.MonitoredDirectories ?? Array.Empty<string>());
        }
        set
        {
            appData.MonitorOptions.MonitoredDirectories = value.Split(',');
        }
    }
}