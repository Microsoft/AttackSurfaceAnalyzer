@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

<h3>FileMonitorOptions</h3>
<input id="enableFileSystemMonitorCheckbox" type="checkbox" @bind="appData.MonitorOptions.EnableFileSystemMonitor" /><label for="enableFileSystemMonitorCheckbox">Enable</label>
<input id="enableGatherHashesFileMonitorCheckbox" type="checkbox" @bind="appData.MonitorOptions.GatherHashes" /><label for="enableGatherHashesFileMonitorCheckbox">Gather Hashes</label>
<input id="enableFileNamesOnlyCheckbox" type="checkbox" @bind="appData.MonitorOptions.FileNamesOnly" /><label for="enableFileNamesOnlyCheckbox">File Names Only</label>

<p>
    <input @onclick="ToggleGlowClassFileSystemMonitor" class="@enableFileSystemMonitorCheckboxGlowClass" id="enableFileSystemMonitorCheckbox" type="checkbox" @bind="appData.MonitorOptions.EnableFileSystemMonitor" /><label @onclick="ToggleGlowClassFileSystemMonitor" for="enableFileSystemMonitorCheckbox">Enable File System Monitor</label>
    <input @onclick="ToggleGlowClassGatherHashes" class="@enableGatherHashesFileMonitorCheckboxGlowClass" id="enableGatherHashesFileMonitorCheckbox" type="checkbox" @bind="appData.MonitorOptions.GatherHashes" /><label @onclick="ToggleGlowClassFileSystemMonitor" for="enableGatherHashesFileMonitorCheckbox">Gather File Hashes</label>
    <input @onclick="ToggleGlowClassNamesOnly" class="@enableFileNamesOnlyCheckboxGlowClass" id="enableFileNamesOnlyCheckbox" type="checkbox" @bind="appData.MonitorOptions.FileNamesOnly" /><label @onclick="ToggleGlowClassNamesOnly" for="enableFileNamesOnlyCheckbox">Only gather Filenames</label>
    <input id="selectedDirectoriesFileMonitorString" type="text" @bind="SelectedDirectories" /><label for="selectedDirectoriesFileMonitorString">Selected Directories</label>
</p>
@code{
    string enableFileSystemMonitorCheckboxGlowClass;

    async void ToggleGlowClassFileSystemMonitor(MouseEventArgs _)
    {
        enableFileSystemMonitorCheckboxGlowClass = Helper.GetGlowClass(appData.MonitorOptions.EnableFileSystemMonitor);
        await Task.Delay(500);
        enableFileSystemMonitorCheckboxGlowClass = string.Empty;
        StateHasChanged();
    }

    string enableGatherHashesFileMonitorCheckboxGlowClass;

    async void ToggleGlowClassGatherHashes(MouseEventArgs _)
    {
        enableGatherHashesFileMonitorCheckboxGlowClass = Helper.GetGlowClass(appData.MonitorOptions.GatherHashes);
        await Task.Delay(500);
        enableGatherHashesFileMonitorCheckboxGlowClass = string.Empty;
        StateHasChanged();
    }

    string enableFileNamesOnlyCheckboxGlowClass;

    async void ToggleGlowClassNamesOnly(MouseEventArgs _)
    {
        enableFileNamesOnlyCheckboxGlowClass = Helper.GetGlowClass(appData.MonitorOptions.FileNamesOnly);
        await Task.Delay(500);
        enableFileNamesOnlyCheckboxGlowClass = string.Empty;
        StateHasChanged();
    }

    string SelectedDirectories
    {
        get
        {
            return string.Join(',', appData.MonitorOptions.MonitoredDirectories ?? Array.Empty<string>());
        }
        set
        {
            appData.MonitorOptions.MonitoredDirectories = value.Split(',');
        }
    }
}