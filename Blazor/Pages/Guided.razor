@using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components
@using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components.States 
@using Microsoft.CST.AttackSurfaceAnalyzer.Types
@using Microsoft.CST.AttackSurfaceAnalyzer.Objects
@using Microsoft.CST.AttackSurfaceAnalyzer.Collectors  
@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

@page "/"

@switch (pageState)
{
    case PageState.Options:
        <label for="RunId">Run Id:</label>
        <input id="RunId" type="text" @bind="RunIdInput" />
        <button @onclick="BeginGuided">Go</button>
        <CollectorOptionsRazor />
        <MonitorOptionsRazor />
        <AnalyzeOptionsRazor />
        break;
    case PageState.Scanning:
        <Scanning />
        break;
    case PageState.Monitoring:
        <Monitoring ContinueGuided="@ContinueGuided" />
        break;
    case PageState.Analyzing:
        <Analyzing />
        break;
    case PageState.Results:
        <Results />
        break;
    case PageState.Error:
        <p>An Error Occured while collecting.</p>
        break;
}

<div style="height:100px"></div>

@code{
    enum PageState
    {
        Options,
        Scanning,
        Monitoring,
        Analyzing,
        Results,
        Error
    }


    string RunIdInput = "Use Timestamp";

    PageState pageState = PageState.Options;

    async void BeginGuided()
    {
        appData.RunId = RunIdInput.Equals("Use Timestamp") ? DateTime.Now.ToString() : RunIdInput;
        timer = new System.Threading.Timer((_) => InvokeAsync(() => StateHasChanged()), null, 0, 100);
        appData.CollectOptions.RunId = appData.FirstRunId;
        if (await BeginScan() == ASA_ERROR.NONE)
        {
            appData.MonitorOptions.RunId = appData.MonitorRunId;
            await BeginMonitor();
        }
        else
        {
            pageState = PageState.Error;
        }
    }
    Results resultsChild;

    async void ContinueGuided()
    {
        AttackSurfaceAnalyzerClient.StopMonitors();

        appData.CollectOptions.RunId = appData.SecondRunId;
        await BeginScan();

        appData.ExportCollectCommandOptions.SaveToDatabase = true;
        appData.ExportCollectCommandOptions.FirstRunId = appData.FirstRunId;
        appData.ExportCollectCommandOptions.SecondRunId = appData.SecondRunId;
        await BeginAnalyze();
        pageState = PageState.Results;
    }

    System.Threading.Timer timer;

    async Task<ASA_ERROR> BeginScan()
    {
        pageState = PageState.Scanning;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions));
    }

    async Task<ASA_ERROR> BeginMonitor()
    {
        pageState = PageState.Monitoring;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunGuiMonitorCommand(appData.MonitorOptions));
    }

    async Task<ASA_ERROR> BeginAnalyze()
    {
        pageState = PageState.Analyzing;

        await Task.Factory.StartNew(() =>
        {
            var CompareOneOptions = appData.CompareCommandOptions;
            CompareOneOptions.FirstRunId = appData.FirstRunId;
            CompareOneOptions.SecondRunId = appData.SecondRunId;
            var results = AttackSurfaceAnalyzerClient.CompareRuns(CompareOneOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, appData.ExportCollectCommandOptions.FirstRunId, appData.ExportCollectCommandOptions.SecondRunId);
        });

        await Task.Factory.StartNew(() =>
        {
            var CompareTwoOptions = appData.CompareCommandOptions;

            CompareTwoOptions.FirstRunId = null;
            CompareTwoOptions.SecondRunId = appData.MonitorRunId;
            var results = AttackSurfaceAnalyzerClient.CompareRuns(CompareTwoOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, null, appData.MonitorRunId);
        });
        return ASA_ERROR.NONE;
    }
}