@using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components
@using Microsoft.CST.AttackSurfaceAnalyzer.Types
@using Microsoft.CST.AttackSurfaceAnalyzer.Objects
@using Microsoft.CST.AttackSurfaceAnalyzer.Collectors  
@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

@page "/"

@switch (pageState)
{
    case PageState.Options:
        <label for="RunId">Run Id:</label>
        <input id="RunId" type="text" @bind="RunIdInput" />
        <button @onclick="BeginGuided">Go</button>
        <CollectorOptionsRazor />
        <MonitorOptionsRazor />
        <AnalyzeOptionsRazor />
        break;
    case PageState.Scanning:
        <p>Running Scan.</p>
        @foreach (BaseCollector collector in AttackSurfaceAnalyzerClient.GetCollectors())
        {
            <div>@collector.GetType().ToString(): @collector.RunStatus</div>
        }
        break;
    case PageState.Monitoring:
        <p>Running Monitoring. Run your software under test now and press Stop when done.</p>
        <button @onclick="ContinueGuided">Stop</button>
        break;
    case PageState.Analyzing:
        <p>Running Analysis.</p>
        break;
    case PageState.Results:
        if (numAnalysisResults == 0)
        {
            <p>No results.</p>
        }
        else
        {
            <select @bind="SelectedResultType">
                @foreach(var resultType in foundResultTypes)
                {
                    <option value="@resultType.Key">@resultType.Key : @resultType.Value </option>
                }
            </select>
            <button @onclick="MoreAnalysisResults">More results</button>
            foreach (var result in analysisResults)
            {
                <p>result.Identity : result.Flag</p>
            }
            <p>Showing Results.</p>
        }
        break;
    case PageState.Error:
        <p>An Error Occured while collecting.</p>
        break;
}

<div style="height:100px"></div>

@code{
    enum PageState
    {
        Options,
        Scanning,
        Monitoring,
        Analyzing,
        Results,
        Error
    }

    string SelectedResultType
    {
        get { return _selectedResultType; }
        set { _selectedResultType = value; offset = 0; GetAnalysisResults(); }
    }

    string _selectedResultType;


    void GetAnalysisResults()
    {
        analysisResults = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResults(FirstRunId, SecondRunId, (RESULT_TYPE)Enum.Parse(typeof(RESULT_TYPE),SelectedResultType), offset, count);
    }

    void MoreAnalysisResults()
    {
        offset += count;
        GetAnalysisResults();
    }

    int offset = 0;
    int count = 100;

    List<Microsoft.CST.AttackSurfaceAnalyzer.Objects.CompareResult> analysisResults = new List<Objects.CompareResult>();

    int numAnalysisResults = 0;

    string RunIdInput = "Use Timestamp";

    string FirstRunId
    {
        get
        {
            return $"{RunId}-before";
        }
    }

    string SecondRunId
    {
        get
        {
            return $"{RunId}-after";
        }
    }

    string MonitorRunId
    {
        get
        {
            return $"{RunId}-monitoring";
        }
    }

    private string RunId = string.Empty;
    PageState pageState = PageState.Options;
    Dictionary<RESULT_TYPE,int> foundResultTypes = new Dictionary<RESULT_TYPE,int>();

    async void BeginGuided()
    {
        RunId = RunIdInput.Equals("Use Timestamp") ? DateTime.Now.ToString() : RunIdInput;
        timer = new System.Threading.Timer((_) => InvokeAsync(() => StateHasChanged()), null, 0, 100);
        appData.CollectOptions.RunId = FirstRunId;
        if (await BeginScan() == ASA_ERROR.NONE)
        {
            appData.MonitorOptions.RunId = MonitorRunId;
            await BeginMonitor();
        }
        else
        {
            pageState = PageState.Error;
        }
    }

    void ParseOptsToResultTypes()
    {
        foreach(var resultType in Enum.GetValues(typeof(RESULT_TYPE)))
        {
            foundResultTypes.Add((RESULT_TYPE)resultType, AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(FirstRunId, SecondRunId, (int)resultType));
        }
    }

    async void ContinueGuided()
    {
        AttackSurfaceAnalyzerClient.StopMonitors();

        appData.CollectOptions.RunId = SecondRunId;
        await BeginScan();

        appData.ExportCollectCommandOptions.SaveToDatabase = true;
        appData.ExportCollectCommandOptions.FirstRunId = FirstRunId;
        appData.ExportCollectCommandOptions.SecondRunId = SecondRunId;
        await BeginAnalyze();
        ParseOptsToResultTypes();
        pageState = PageState.Results;
    }

    System.Threading.Timer timer;

    async Task<ASA_ERROR> BeginScan()
    {
        pageState = PageState.Scanning;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions));
    }

    async Task<ASA_ERROR> BeginMonitor()
    {
        pageState = PageState.Monitoring;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunGuiMonitorCommand(appData.MonitorOptions));
    }

    async Task<ASA_ERROR> BeginAnalyze()
    {
        pageState = PageState.Analyzing;
        await Task.Factory.StartNew(() =>
        {
            var results = AttackSurfaceAnalyzerClient.CompareRuns(appData.CompareCommandOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, appData.ExportCollectCommandOptions.FirstRunId, appData.ExportCollectCommandOptions.SecondRunId);
        });
        return ASA_ERROR.NONE;
    }
}