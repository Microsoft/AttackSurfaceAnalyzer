@using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components
@using Microsoft.CST.AttackSurfaceAnalyzer.Types 
@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

@page "/"

@switch (pageState)
{
    case PageState.Options:
        <label for="RunId">Run Id:</label><input id="RunId" type="text" @bind="RunIdInput" />
        <button @onclick="BeginGuided">Go</button>
        <CollectorOptionsRazor />
        <MonitorOptionsRazor />
        <AnalyzeOptionsRazor />
        break;
    case PageState.Scanning:
        <p>Running Scan.</p>
        @foreach(Microsoft.CST.AttackSurfaceAnalyzer.Collectors.BaseCollector collector in AttackSurfaceAnalyzerClient.GetCollectors())
        {
            <div>@collector.GetType().ToString(): @collector.RunStatus</div>
        }
        break;
    case PageState.Monitoring:
        <p>Running Monitoring. Run your software under test now and press Stop when done.</p>
        <button @onclick="ContinueGuided">Stop</button>
        break;
    case PageState.Analyzing:
        <p>Running Analysis.</p>
        break;
    case PageState.Results:
        <p>Showing Results.</p>
        break;
}

<div style="height:100px"></div>

@code{
    enum PageState
    {
        Options,
        Scanning,
        Monitoring,
        Analyzing,
        Results
    }

    string RunIdInput = "Use Timestamp";
    string FirstRunId {
        get
        {
            return $"{RunIdInput}-before";
        }
    }
    string SecondRunId
    {
        get
        {
            return $"{RunIdInput}-after";
        }
    }
    string MonitorRunId
    {
        get
        {
            return $"{RunIdInput}-monitoring";
        }
    }
    private string RunId = string.Empty;
    PageState pageState = PageState.Options;

    async void BeginGuided()
    {
        RunId = RunIdInput.Equals("Use Timestamp") ? DateTime.Now.ToString() : RunIdInput;
        timer = new System.Threading.Timer((_) => InvokeAsync(()=>StateHasChanged()), null, 0, 100);
        appData.CollectOptions.RunId = FirstRunId;
        await BeginScan();
        appData.MonitorOptions.RunId = MonitorRunId;
        await BeginMonitor();
    }

    async void ContinueGuided()
    {
        appData.CollectOptions.RunId = SecondRunId;
        await BeginScan();
        appData.ExportCollectCommandOptions.FirstRunId = FirstRunId;
        appData.ExportCollectCommandOptions.SecondRunId = SecondRunId;
        await BeginAnalyze();
        pageState = PageState.Results;
    }

    System.Threading.Timer timer;

    async Task<ASA_ERROR> BeginScan()
    {
        pageState = PageState.Scanning;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions));
    }

    async Task<ASA_ERROR> BeginMonitor()
    {
        pageState = PageState.Monitoring;
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunGuiMonitorCommand(appData.MonitorOptions));
    }

    async Task<ASA_ERROR> BeginAnalyze()
    {
        pageState = PageState.Analyzing;
        await Task.Factory.StartNew(() =>
        {
            var results = AttackSurfaceAnalyzerClient.CompareRuns(appData.CompareCommandOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, appData.ExportCollectCommandOptions.FirstRunId, appData.ExportCollectCommandOptions.SecondRunId);
        });
        return ASA_ERROR.NONE;
    }
}